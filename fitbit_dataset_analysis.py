# -*- coding: utf-8 -*-
"""Fitbit Dataset Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/104eQm-J1m86B-kOopnmgOe0VY8c21i2P
"""

import numpy as np
import pandas as pd
import datetime as dt
import glob
import os
import seaborn as sns
import matplotlib.pyplot as plt

daily_activity_merged = pd.read_csv("dailyActivity_merged.csv")
daily_calories_merged = pd.read_csv("dailyCalories_merged.csv")
daily_steps_merged = pd.read_csv("dailySteps_merged.csv")
daily_intenisites_merged = pd.read_csv("dailyIntensities_merged.csv")
hourly_calories_merged = pd.read_csv("hourlyCalories_merged.csv")
hourly_intenisites_merged = pd.read_csv("hourlyCalories_merged.csv")
heartrate_seconds_merged = pd.read_csv("heartrate_seconds_merged.csv")
hourlySteps_merged= pd.read_csv("hourlySteps_merged.csv")
mintues_calorieswide_merged = pd.read_csv("minuteCaloriesWide_merged.csv")
mintues_calorierNarrow_merged = pd.read_csv("minuteCaloriesNarrow_merged.csv")
mintues_intenisitesWide_merged = pd.read_csv("minuteIntensitiesWide_merged.csv")
mintues_intenisitesNarrow_merged = pd.read_csv("minuteIntensitiesNarrow_merged.csv")
mintues_sleeper_merged = pd.read_csv("minuteSleep_merged.csv")
minuteMETsNarrow_merged = pd.read_csv("minuteMETsNarrow_merged.csv")
minuteStepsNarrow_merged = pd.read_csv("minuteSleep_merged.csv")
minuteStepsWide_merged= pd.read_csv("minuteStepsWide_merged.csv")
sleep_day_merged = pd.read_csv("sleepDay_merged.csv")
weight_log_merged = pd.read_csv("weightLogInfo_merged.csv")

daily_activity_merged.head()

daily_calories_merged.head()

daily_steps_merged.head()

daily_intenisites_merged.head()

hourly_calories_merged.head()

hourly_intenisites_merged.head()

heartrate_seconds_merged.head()

hourlySteps_merged.head()

mintues_calorieswide_merged.head()

mintues_calorierNarrow_merged.head()

mintues_intenisitesWide_merged.head()

mintues_intenisitesNarrow_merged.head()

mintues_sleeper_merged.head()

minuteMETsNarrow_merged.head()

minuteStepsNarrow_merged.head()

minuteStepsWide_merged.head()

sleep_day_merged.head()

weight_log_merged.head()

daily_activity_merged.dtypes

daily_calories_merged.dtypes

daily_steps_merged.dtypes

daily_intenisites_merged.dtypes

hourly_calories_merged.dtypes

hourly_intenisites_merged.dtypes

heartrate_seconds_merged.dtypes

hourlySteps_merged.dtypes

mintues_calorieswide_merged.dtypes

mintues_calorierNarrow_merged.dtypes

mintues_intenisitesWide_merged.dtypes

mintues_sleeper_merged.dtypes

minuteMETsNarrow_merged.dtypes

minuteStepsNarrow_merged.dtypes

minuteStepsWide_merged.dtypes

sleep_day_merged.dtypes

weight_log_merged.dtypes

"""Calculating the unique participents in each dataframe"""

daily_activity_merged.nunique()

daily_calories_merged.nunique()

daily_steps_merged.nunique()

daily_intenisites_merged.nunique()

hourly_calories_merged.nunique()

hourly_intenisites_merged.nunique()

heartrate_seconds_merged.nunique()

hourlySteps_merged.nunique()

mintues_calorieswide_merged.nunique()

mintues_calorierNarrow_merged.nunique()

mintues_intenisitesWide_merged.nunique()

mintues_intenisitesNarrow_merged.nunique()

mintues_sleeper_merged.nunique()

minuteMETsNarrow_merged.nunique()

minuteStepsNarrow_merged.nunique()

minuteStepsWide_merged.nunique()

sleep_day_merged.nunique()

weight_log_merged.nunique()

daily_activity_merged.shape

daily_calories_merged.shape

daily_steps_merged.shape

daily_intenisites_merged.shape

hourly_calories_merged.shape

hourly_intenisites_merged.shape

heartrate_seconds_merged.shape

hourlySteps_merged.shape

mintues_calorieswide_merged.shape

mintues_calorierNarrow_merged.shape

mintues_intenisitesWide_merged.shape

mintues_intenisitesNarrow_merged.shape

mintues_sleeper_merged.shape

minuteMETsNarrow_merged.shape

minuteStepsNarrow_merged.shape

minuteStepsWide_merged.shape

sleep_day_merged.shape

weight_log_merged.shape

daily_activity_merged.describe()

daily_calories_merged.describe()

daily_steps_merged.describe()

daily_intenisites_merged.describe()

hourly_calories_merged.describe()

hourly_intenisites_merged.describe()

heartrate_seconds_merged.describe()

hourlySteps_merged.describe()

mintues_calorieswide_merged.describe()

mintues_calorierNarrow_merged.describe()

mintues_intenisitesWide_merged.describe()

mintues_intenisitesNarrow_merged.describe()

mintues_sleeper_merged.describe()

minuteMETsNarrow_merged.describe()

minuteStepsNarrow_merged.describe()

minuteStepsWide_merged.describe()

sleep_day_merged.describe()

weight_log_merged.describe()

daily_activity_merged.isnull().sum()

daily_calories_merged.isnull().sum()

daily_steps_merged.isnull().sum()

daily_intenisites_merged.isnull().sum()

hourly_calories_merged.isnull().sum()

hourly_intenisites_merged.isnull().sum()

heartrate_seconds_merged.isnull().sum()

hourlySteps_merged.isnull().sum()

mintues_calorieswide_merged.isnull().sum()

mintues_calorierNarrow_merged.isnull().sum()

mintues_intenisitesWide_merged.isnull().sum()

mintues_intenisitesNarrow_merged.isnull().sum()

mintues_sleeper_merged.isnull().sum()

minuteMETsNarrow_merged.isnull().sum()

minuteStepsNarrow_merged.isnull().sum()

minuteStepsWide_merged.isnull().sum()

sleep_day_merged.isnull().sum()

weight_log_merged.isnull().sum()

daily_activity_merged.duplicated()
daily_calories_merged.duplicated()
daily_steps_merged.duplicated()
daily_intenisites_merged.duplicated()
hourly_calories_merged.duplicated()
hourly_intenisites_merged.duplicated()
heartrate_seconds_merged.duplicated()
hourlySteps_merged.duplicated()
mintues_calorieswide_merged.duplicated()
mintues_calorierNarrow_merged.duplicated()
mintues_intenisitesWide_merged.duplicated()
mintues_intenisitesNarrow_merged.duplicated()
mintues_sleeper_merged.duplicated()
minuteMETsNarrow_merged.duplicated()
minuteStepsNarrow_merged.duplicated()
minuteStepsWide_merged.duplicated()
sleep_day_merged.duplicated()
weight_log_merged.duplicated()

daily_activity_merged = daily_activity_merged.dropna()

daily_steps_merged = daily_steps_merged.dropna()

daily_intenisites_merged = daily_intenisites_merged.dropna()

hourly_calories_merged = hourly_calories_merged.dropna()

hourly_intenisites_merged = hourly_intenisites_merged.dropna()

heartrate_seconds_merged = heartrate_seconds_merged.dropna()

hourlySteps_merged = hourlySteps_merged.dropna()

mintues_calorieswide_merged = mintues_calorieswide_merged.dropna()

mintues_calorierNarrow_merged = mintues_calorierNarrow_merged.dropna()

mintues_intenisitesWide_merged = mintues_intenisitesWide_merged.dropna()

mintues_intenisitesNarrow_merged = mintues_intenisitesNarrow_merged.dropna()

mintues_sleeper_merged = mintues_sleeper_merged.dropna()

minuteMETsNarrow_merged = minuteMETsNarrow_merged.dropna()

minuteStepsNarrow_merged = minuteStepsNarrow_merged.dropna()

minuteStepsWide_merged = minuteStepsWide_merged.dropna()

sleep_day_merged = sleep_day_merged.dropna()

weight_log_merged = weight_log_merged.dropna()

def rename_date_time(df):
    df.rename(columns={'old_date_column': 'Date', 'old_time_column': 'Time'}, inplace=True)

rename_date_time(daily_activity_merged)
rename_date_time(daily_calories_merged)
rename_date_time(daily_steps_merged)
rename_date_time(daily_intenisites_merged)
rename_date_time(hourly_calories_merged)
rename_date_time(hourly_intenisites_merged)
rename_date_time(heartrate_seconds_merged)
rename_date_time(hourlySteps_merged)
rename_date_time(mintues_calorieswide_merged)
rename_date_time(mintues_calorierNarrow_merged)
rename_date_time(mintues_intenisitesWide_merged)
rename_date_time(mintues_intenisitesNarrow_merged)
rename_date_time(mintues_sleeper_merged)
rename_date_time(minuteMETsNarrow_merged)
rename_date_time(minuteStepsNarrow_merged)
rename_date_time(minuteStepsWide_merged)
rename_date_time(sleep_day_merged)
rename_date_time(weight_log_merged)

# Verify the changes for one of the DataFrames
print(daily_activity_merged.head())

"""**Merging all the dataframes**"""

import pandas as pd

dataframes = [
    daily_activity_merged,
    daily_calories_merged,
    daily_steps_merged,
    daily_intenisites_merged,
    hourly_calories_merged,
    hourly_intenisites_merged,
    heartrate_seconds_merged,
    hourlySteps_merged,
    mintues_calorieswide_merged,
    mintues_calorierNarrow_merged,
    mintues_intenisitesWide_merged,
    mintues_intenisitesNarrow_merged,
    mintues_sleeper_merged,
    minuteMETsNarrow_merged,
    minuteStepsNarrow_merged,
    minuteStepsWide_merged,
    sleep_day_merged,
    weight_log_merged
]

result = pd.concat(dataframes, axis=1)

result.head(10)

print(daily_activity_merged.columns)
print(daily_steps_merged.columns)
print(daily_calories_merged.columns)
print(daily_intenisites_merged.columns)
print(hourly_calories_merged.columns)
print(hourlySteps_merged.columns)
print(hourly_intenisites_merged.columns)
print(heartrate_seconds_merged.columns)
print(mintues_calorieswide_merged.columns)
print(mintues_calorierNarrow_merged.columns)
print(mintues_intenisitesWide_merged.columns)
print(mintues_intenisitesNarrow_merged.columns)
print(mintues_sleeper_merged.columns)
print(minuteMETsNarrow_merged.columns)
print(minuteStepsNarrow_merged.columns)
print(minuteStepsWide_merged.columns)
print(sleep_day_merged.columns)
print(weight_log_merged.columns)

daily_activity_merged = daily_activity_merged.rename(columns={'ActivityDate': 'Date'})
daily_steps_merged = daily_steps_merged.rename(columns={'ActivityDate': 'Date'})
daily_calories_merged = daily_calories_merged.rename(columns={'ActivityDate': 'Date'})
daily_intenisites_merged = daily_intenisites_merged.rename(columns={'ActivityDate': 'Date'})


hourly_steps_merged = hourlySteps_merged.rename(columns={'ActivityHour' : 'Time'})
hourly_intenisites_merged = hourly_intenisites_merged.rename(columns={'ActivityHour' : 'Time'})
hourly_calories_merged = hourly_calories_merged.rename(columns={'ActivityHour' : 'Time'})

heartrate_seconds_merged = heartrate_seconds_merged.rename(columns={'ActivityHour' : 'Time'})

mintues_calorieswide_merged = mintues_calorieswide_merged.rename(columns={'ActivityHour' : 'Time'})
mintues_calorierNarrow_merged = mintues_calorierNarrow_merged.rename(columns={'ActivityHour' : 'Time'})
mintues_intenisitesWide_merged = mintues_intenisitesWide_merged.rename(columns={'ActivityHour' : 'Time'})
mintues_intenisitesNarrow_merged = mintues_intenisitesNarrow_merged.rename(columns={'ActivityHour' : 'Time'})
mintues_sleeper_merged = mintues_sleeper_merged.rename(columns={'ActivityHour' : 'Time'})
minuteMETsNarrow_merged = minuteMETsNarrow_merged.rename(columns={'ActivityHour' : 'Time'})
minuteStepsNarrow_merged = minuteStepsNarrow_merged.rename(columns={'ActivityHour' : 'Time'})
minuteStepsWide_merged = minuteStepsWide_merged.rename(columns={'ActivityHour' : 'Time'})

sleep_day_merged= sleep_day_merged.rename(columns={'SleepDay': 'Date'})

weight_log_merged = weight_log_merged.rename(columns={'SleepDay': 'Date'})

import pandas as pd

print(globals())

daily_activity_merged['Date'] = pd.to_datetime(daily_activity_merged['Date'])
daily_steps_merged['ActivityDay'] = pd.to_datetime(daily_steps_merged['ActivityDay'])
daily_calories_merged['ActivityDay'] = pd.to_datetime(daily_calories_merged['ActivityDay'])
daily_intenisites_merged['ActivityDay'] = pd.to_datetime(daily_intenisites_merged['ActivityDay'])

import pandas as pd

print(globals())

hourly_calories_merged['Time'] = pd.to_datetime(hourly_calories_merged['Time'])
hourly_steps_merged['Time'] = pd.to_datetime(hourly_steps_merged['Time'])
hourly_intenisites_merged['Time'] = pd.to_datetime(hourly_intenisites_merged['Time'])

heartrate_seconds_merged['Time'] = pd.to_datetime(heartrate_seconds_merged['Time'])

import pandas as pd

print(globals())
mintues_calorieswide_merged['Time'] = pd.to_datetime(mintues_calorieswide_merged['Time'])
mintues_calorierNarrow_merged['ActivityMinute'] = pd.to_datetime(mintues_calorierNarrow_merged['ActivityMinute'])
mintues_intenisitesWide_merged['Time'] = pd.to_datetime(mintues_intenisitesWide_merged['Time'])
mintues_intenisitesNarrow_merged['ActivityMinute'] = pd.to_datetime(mintues_intenisitesNarrow_merged['ActivityMinute'])

print(minuteStepsWide_merged.columns)

import pandas as pd

print(globals())

mintues_sleeper_merged['date'] = pd.to_datetime(mintues_sleeper_merged['date'])
minuteMETsNarrow_merged['ActivityMinute'] = pd.to_datetime(minuteMETsNarrow_merged['ActivityMinute'])
# Assuming minuteStepsWide_merged is a DataFrame

# Check if 'ActivityMinute' is present in the DataFrame columns
if 'ActivityMinute' in minuteStepsWide_merged.columns:
    minuteStepsWide_merged['Time'] = pd.to_datetime(minuteStepsWide_merged['Time'])
    minuteStepsWide_merged['ActivityMinute'] = pd.to_datetime(minuteStepsWide_merged['ActivityMinute'])
else:
    print("Column 'ActivityMinute' not found in minuteStepsWide_merged.")

# Continue with the rest of your code or additional error handling if needed
minuteStepsWide_merged['Time'] = pd.to_datetime(minuteStepsWide_merged['Time'])

import pandas as pd

print(globals())

sleep_day_merged['Date'] = pd.to_datetime(sleep_day_merged['Date'])

import pandas as pd

print(globals())

weight_log_merged['Date'] = pd.to_datetime(weight_log_merged['Date'])

"""**Merging datasets**"""

data_activity = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
                 'Activity': ['Walking', 'Running', 'Cycling']}
daily_activity_merged = pd.DataFrame(data_activity)

data_steps = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
              'Steps': [10000, 12000, 8000]}
daily_steps_merged = pd.DataFrame(data_steps)

data_calories = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
                 'Calories': [300, 400, 250]}
daily_calories_merged = pd.DataFrame(data_calories)

data_intensities = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
                    'Intensity': ['Low', 'High', 'Medium']}
daily_intensities_merged = pd.DataFrame(data_intensities)

merged_df = pd.merge(daily_activity_merged, daily_steps_merged, on='Date')
merged_df = pd.merge(merged_df, daily_calories_merged, on='Date')
merged_df = pd.merge(merged_df, daily_intensities_merged, on='Date')

print(merged_df)

data_calories = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                  'Calories': [100, 150, 200]}
hourly_calories_merged = pd.DataFrame(data_calories)

data_steps = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
              'Steps': [500, 600, 700]}
hourly_steps_merged = pd.DataFrame(data_steps)

data_intensities = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                     'Intensity': ['Low', 'Medium', 'High']}
hourly_intensities_merged = pd.DataFrame(data_intensities)

merged_df = pd.merge(hourly_calories_merged, hourly_steps_merged, on='Timestamp')
merged_df = pd.merge(merged_df, hourly_intensities_merged, on='Timestamp')

print(merged_df)

data_heartrate = {'Timestamp': ['2024-01-01 00:00:00', '2024-01-01 00:00:01', '2024-01-01 00:00:02'],
                  'HeartRate': [75, 76, 78]}
heartrate_seconds_merged = pd.DataFrame(data_heartrate)

merged_df = pd.merge(merged_df, heartrate_seconds_merged, on='Timestamp', how='inner')

print(merged_df)

data_calories_wide = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                      'Calories_Wide': [100, 150, 200]}
mintue_calorieswide_merged = pd.DataFrame(data_calories_wide)

data_calories_narrow = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                        'Calories_Narrow': [75, 80, 85]}
mintues_calorierNarrow_merged = pd.DataFrame(data_calories_narrow)

data_intensities_wide = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                         'Intensity_Wide': ['Low', 'Medium', 'High']}
mintues_intenisitesWide_merged = pd.DataFrame(data_intensities_wide)

data_intensities_narrow = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                           'Intensity_Narrow': ['Low', 'High', 'Medium']}
mintues_intenisitesNarrow_merged = pd.DataFrame(data_intensities_narrow)

data_sleeper = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                'Sleep_Status': ['Awake', 'Asleep', 'Awake']}
mintues_sleeper_merged = pd.DataFrame(data_sleeper)

data_mets_narrow = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                    'METs_Narrow': [1.5, 2.0, 1.8]}
minuteMETsNarrow_merged = pd.DataFrame(data_mets_narrow)

data_steps_narrow = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                     'Steps_Narrow': [500, 600, 700]}
minuteStepsNarrow_merged = pd.DataFrame(data_steps_narrow)

data_steps_wide = {'Timestamp': ['2024-01-01 00:00', '2024-01-01 01:00', '2024-01-01 02:00'],
                   'Steps_Wide': [550, 620, 710]}
minuteStepsWide_merged = pd.DataFrame(data_steps_wide)

merged_df = pd.merge(mintue_calorieswide_merged, mintues_calorierNarrow_merged, on='Timestamp', how='inner')
merged_df = pd.merge(merged_df, mintues_intenisitesWide_merged, on='Timestamp', how='inner')
merged_df = pd.merge(merged_df, mintues_intenisitesNarrow_merged, on='Timestamp', how='inner')
merged_df = pd.merge(merged_df, mintues_sleeper_merged, on='Timestamp', how='inner')
merged_df = pd.merge(merged_df, minuteMETsNarrow_merged, on='Timestamp', how='inner')
merged_df = pd.merge(merged_df, minuteStepsNarrow_merged, on='Timestamp', how='inner')
merged_df = pd.merge(merged_df, minuteStepsWide_merged, on='Timestamp', how='inner')

print(merged_df)

data_sleep_day = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
                  'Sleep_Duration': [7, 8, 6]}
sleep_day_merged = pd.DataFrame(data_sleep_day)

print("Columns of merged_df:", merged_df.columns)

print("Columns of sleep_day_merged:", sleep_day_merged.columns)

if 'Date' in merged_df.columns and 'Date' in sleep_day_merged.columns:
    merged_df = pd.merge(merged_df, sleep_day_merged, left_on='Date', right_on='Date', how='inner')

    print(merged_df)

data_weight_log = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
                   'Weight': [150, 149, 151]}
weight_log_merged = pd.DataFrame(data_weight_log)

print("Columns of merged_df:", merged_df.columns)

print("Columns of weight_log_merged:", weight_log_merged.columns)

if 'Date' in merged_df.columns and 'Date' in weight_log_merged.columns:
    merged_df = pd.merge(merged_df, weight_log_merged, on='Date', how='inner')

    print(merged_df)

import pandas as pd

df_activity = daily_activity_merged
df_steps = daily_steps_merged
df_calories = daily_calories_merged
df_intensities = daily_intensities_merged

merged_data = pd.concat([df_activity, df_steps, df_calories, df_intensities], axis=1)

correlation_matrix = merged_data.corr()

print(correlation_matrix)

import pandas as pd

df_calories_hourly = hourly_calories_merged
df_steps_hourly = hourly_steps_merged
df_intensities_hourly = hourly_intensities_merged

merged_data_hourly = pd.concat([df_calories_hourly, df_steps_hourly, df_intensities_hourly], axis=1)

correlation_matrix_hourly = merged_data_hourly.corr()

print(correlation_matrix_hourly)

import pandas as pd

df_calories_wide = mintue_calorieswide_merged
df_calories_narrow = mintues_calorierNarrow_merged
df_intensities_wide = mintues_intenisitesWide_merged
df_intensities_narrow = mintues_intenisitesNarrow_merged

merged_data_minutes = pd.concat([df_calories_wide, df_calories_narrow, df_intensities_wide, df_intensities_narrow], axis=1)

correlation_matrix_minutes = merged_data_minutes.corr()

print(correlation_matrix_minutes)

import pandas as pd

df_sleeper = mintues_sleeper_merged
df_mets_narrow = minuteMETsNarrow_merged
df_steps_narrow = minuteStepsNarrow_merged
df_steps_wide = minuteStepsWide_merged

merged_data_minutes = pd.concat([df_sleeper, df_mets_narrow, df_steps_narrow, df_steps_wide], axis=1)

correlation_matrix_minutes = merged_data_minutes.corr()

print(correlation_matrix_minutes)

import pandas as pd

df_sleep = sleep_day_merged

correlation_matrix_sleep = df_sleep.corr()

print(correlation_matrix_sleep)

import pandas as pd

df_weight = weight_log_merged

correlation_matrix_weight = df_weight.corr()

print(correlation_matrix_weight)

"""**Data Visualisation**"""

daily_steps_data = [1000, 2000, 1500, 3000, 2500]
daily_calories_data = [1500, 1800, 2000, 1600, 2200]
daily_intensity_data = [5, 7, 6, 8, 9]

daily_steps_series = pd.Series(daily_steps_data)
daily_calories_series = pd.Series(daily_calories_data)
daily_intensity_series = pd.Series(daily_intensity_data)

max_daily_steps = daily_steps_series.max()
min_daily_steps = daily_steps_series.min()
mean_daily_steps = daily_steps_series.mean()
median_daily_steps = daily_steps_series.median()

max_daily_calories = daily_calories_series.max()
min_daily_calories = daily_calories_series.min()
mean_daily_calories = daily_calories_series.mean()
median_daily_calories = daily_calories_series.median()

max_daily_intensity = daily_intensity_series.max()
min_daily_intensity = daily_intensity_series.min()
mean_daily_intensity = daily_intensity_series.mean()
median_daily_intensity = daily_intensity_series.median()

print("Daily Steps ")
print("Max:", max_daily_steps)
print("Min:", min_daily_steps)
print("Mean:", mean_daily_steps)
print("Median:", median_daily_steps)
print("\n")

print("Daily Calories ")
print("Max:", max_daily_calories)
print("Min:", min_daily_calories)
print("Mean:", mean_daily_calories)
print("Median:", median_daily_calories)
print("\n")

print(" Daily Intensity ")
print("Max:", max_daily_intensity)
print("Min:", min_daily_intensity)
print("Mean:", mean_daily_intensity)
print("Median:", median_daily_intensity)
print("\n")


labels = ['Max', 'Min', 'Mean', 'Median']
values = [max_daily_calories, min_daily_calories, mean_daily_calories, median_daily_calories]

plt.bar(labels, values, color=['black', 'blue', 'red', 'green'])
plt.title('Daily Steps Statistics')
plt.ylabel('Number of Steps')
plt.show()


plt.bar(labels, values, color=['red', 'yellow', 'blue', 'green'])
plt.title('Daily Calories Statistics')
plt.ylabel('Calories')
plt.show()

plt.bar(labels, values, color=['purple', 'blue', 'red', 'brown'])
plt.title('Daily Calories Statistics')
plt.ylabel('Calories')

plt.show()

import matplotlib.pyplot as plt

hourly_steps_data = [500,1000,1500,2000,2500]
hourly_calories_data = [98,34,25,78,98]
hourly_intensity_data = [3,5,7,9,10]

hourly_steps_series = pd.Series(hourly_steps_data)
hourly_calories_series = pd.Series(hourly_calories_data)
hourly_intensity_series = pd.Series(hourly_intensity_data)

max_hourly_steps = hourly_steps_series.max()
min_hourly_steps = hourly_steps_series.min()
mean_hourly_steps = hourly_steps_series.mean()
median_hourly_steps = hourly_steps_series.median()

max_hourly_calories = hourly_calories_series.max()
min_hourly_calories = hourly_calories_series.min()
mean_hourly_calories = hourly_calories_series.mean()
median_hourly_calories = hourly_calories_series.median()

max_hourly_intensity = hourly_intensity_series.max()
min_hourly_intensity = hourly_intensity_series.min()
mean_hourly_intensity = hourly_intensity_series.mean()
median_hourly_intensity = hourly_intensity_series.median()

print("Hourly Steps ")
print("Max:", max_hourly_steps)
print("Min:", min_hourly_steps)
print("Mean:", mean_hourly_steps)
print("Median:", median_hourly_steps)
print("\n")

print("Hourly Calories")
print("Max:", max_hourly_calories)
print("Min:", min_hourly_calories)
print("Mean:", mean_hourly_calories)
print("Median:", median_hourly_calories)
print("\n")

print("Hourly Intensity ")
print("Max:", max_hourly_intensity)
print("Min:", min_hourly_intensity)
print("Mean:", mean_hourly_intensity)
print("Median:", median_hourly_intensity)
print("\n")

plt.plot(hourly_steps_data, marker='o', linestyle='dashdot')

plt.title('Hourly Steps')
plt.xlabel('Hour')
plt.ylabel('Steps')
plt.show()

plt.plot(hourly_calories_data, marker='o', linestyle='dashdot')
plt.title('Hourly Calories')
plt.xlabel('Hour')
plt.ylabel('Calories')
plt.show()

plt.plot(hourly_intensity_data, marker='o', linestyle='dashdot')
plt.title('Hourly Intensity')
plt.xlabel('Hour')
plt.ylabel('Intensity')
plt.show()

heartrate_seconds_data = [20,29,30,39,40,45,78,90,90,100]

heartrate_seconds_series = pd.Series(heartrate_seconds_data)

max_heartrate = heartrate_seconds_series.max()
min_heartrate = heartrate_seconds_series.min()
mean_heartrate = heartrate_seconds_series.mean()
median_heartrate = heartrate_seconds_series.median()

print("Heartrate")
print("Max:", max_heartrate)
print("Min:", min_heartrate)
print("Mean:", mean_heartrate)
print("Median:", median_heartrate)
print("\n")

heartrate_data = [max_heartrate, min_heartrate, mean_heartrate, median_heartrate]
labels = ['Max', 'Min', 'Mean', 'Median']

plt.bar(labels, heartrate_data, color=['red', 'green', 'orange', 'purple'])
plt.title('Heart Rate ')
plt.xlabel('Statistic')
plt.ylabel('Heart Rate')
plt.show()

minutes_calories_wide_data = [60,70,80,90,100]
minutes_calories_narrow_data = [20,30,40,50,60]
minutes_intensity_wide_data = [2,3,4,5,6]
minutes_intensity_narrow_data = [5,6,7,8,9]

minutes_calories_wide_series = pd.Series(minutes_calories_wide_data)
minutes_calories_narrow_series = pd.Series(minutes_calories_narrow_data)
minutes_intensity_wide_series = pd.Series(minutes_intensity_wide_data)
minutes_intensity_narrow_series = pd.Series(minutes_intensity_narrow_data)

max_calories_wide = minutes_calories_wide_series.max()
min_calories_wide = minutes_calories_wide_series.min()
mean_calories_wide = minutes_calories_wide_series.mean()
median_calories_wide = minutes_calories_wide_series.median()

max_calories_narrow = minutes_calories_narrow_series.max()
min_calories_narrow = minutes_calories_narrow_series.min()
mean_calories_narrow = minutes_calories_narrow_series.mean()
median_calories_narrow = minutes_calories_narrow_series.median()

max_intensity_wide = minutes_intensity_wide_series.max()
min_intensity_wide = minutes_intensity_wide_series.min()
mean_intensity_wide = minutes_intensity_wide_series.mean()
median_intensity_wide = minutes_intensity_wide_series.median()

max_intensity_narrow = minutes_intensity_narrow_series.max()
min_intensity_narrow = minutes_intensity_narrow_series.min()
mean_intensity_narrow = minutes_intensity_narrow_series.mean()
median_intensity_narrow = minutes_intensity_narrow_series.median()

print("Minutes Calories Wide")
print("Max:", max_calories_wide)
print("Min:", min_calories_wide)
print("Mean:", mean_calories_wide)
print("Median:", median_calories_wide)
print("\n")

print("Minutes Calories Narrow")
print("Max:", max_calories_narrow)
print("Min:", min_calories_narrow)
print("Mean:", mean_calories_narrow)
print("Median:", median_calories_narrow)
print("\n")

print("Minutes Intensity Wide")
print("Max:", max_intensity_wide)
print("Min:", min_intensity_wide)
print("Mean:", mean_intensity_wide)
print("Median:", median_intensity_wide)
print("\n")

print("Minutes Intensity Narrow")
print("Max:", max_intensity_narrow)
print("Min:", min_intensity_narrow)
print("Mean:", mean_intensity_narrow)
print("Median:", median_intensity_narrow)
print("\n")


x_values = ["Max", "Min", "Mean", "Median"]
y_values = [max_calories_wide, min_calories_wide, mean_calories_wide, median_calories_wide]

plt.plot(x_values, y_values, marker='H')
plt.title("Calories Wide")
plt.xlabel("Statistic")
plt.ylabel("Calories Wide")
plt.show()

plt.figure(figsize=(8, 6))
plt.plot(x_values, y_values, marker='H')
plt.title("Calories Wide")
plt.xlabel("Statistic")
plt.ylabel("Calories Wide")
plt.show()

plt.figure(figsize=(8, 4))
plt.plot(x_values, y_values, marker='H')
plt.title("Intensity Wide")
plt.xlabel("Statistic")
plt.ylabel("Intensity Wide")
plt.show()

plt.figure(figsize=(8, 4))
plt.plot(x_values, y_values, marker='H')
plt.title("Intensity Narrow")
plt.xlabel("Statistic")
plt.ylabel("Intensity Narrow")
plt.show()

minutes_sleeper_data = [3,4,5,6,7,8]
minute_METs_narrow_data = [3,3.5,3.9,4.0,4.2,4.5]
minute_steps_narrow_data = [1234,4567,8906,3453,8765,5743]
minute_steps_wide_data = [500,600,700,800,100,599]

minutes_sleeper_series = pd.Series(minutes_sleeper_data)
minute_METs_narrow_series = pd.Series(minute_METs_narrow_data)
minute_steps_narrow_series = pd.Series(minute_steps_narrow_data)
minute_steps_wide_series = pd.Series(minute_steps_wide_data)

max_sleeper = minutes_sleeper_series.max()
min_sleeper = minutes_sleeper_series.min()
mean_sleeper = minutes_sleeper_series.mean()
median_sleeper = minutes_sleeper_series.median()

max_METs_narrow = minute_METs_narrow_series.max()
min_METs_narrow = minute_METs_narrow_series.min()
mean_METs_narrow = minute_METs_narrow_series.mean()
median_METs_narrow = minute_METs_narrow_series.median()

max_steps_narrow = minute_steps_narrow_series.max()
min_steps_narrow = minute_steps_narrow_series.min()
mean_steps_narrow = minute_steps_narrow_series.mean()
median_steps_narrow = minute_steps_narrow_series.median()

max_steps_wide = minute_steps_wide_series.max()
min_steps_wide = minute_steps_wide_series.min()
mean_steps_wide = minute_steps_wide_series.mean()
median_steps_wide = minute_steps_wide_series.median()

print("Minutes Sleeper")
print("Max:", max_sleeper)
print("Min:", min_sleeper)
print("Mean:", mean_sleeper)
print("Median:", median_sleeper)
print("\n")

print("Minute METs Narrow")
print("Max:", max_METs_narrow)
print("Min:", min_METs_narrow)
print("Mean:", mean_METs_narrow)
print("Median:", median_METs_narrow)
print("\n")

print("Minute Steps Narrow")
print("Max:", max_steps_narrow)
print("Min:", min_steps_narrow)
print("Mean:", mean_steps_narrow)
print("Median:", median_steps_narrow)
print("\n")

print("Minute Steps Wide")
print("Max:", max_steps_wide)
print("Min:", min_steps_wide)
print("Mean:", mean_steps_wide)
print("Median:", median_steps_wide)
print("\n")


x_values = ["Max", "Min", "Mean", "Median"]
y_values = [max_sleeper, min_sleeper, mean_sleeper, median_sleeper]

plt.figure(figsize=(8, 6))
plt.plot(x_values, y_values, marker='H')
plt.title("Minutes Sleeper")
plt.xlabel("Statistic")
plt.ylabel("Minutes Sleeper")
plt.show()

plt.figure(figsize=(8, 6))
plt.plot(x_values, y_values, marker='H')
plt.title("METs Narrow")
plt.xlabel("Statistic")
plt.ylabel("Minute METs Narrow")
plt.show()

plt.figure(figsize=(8, 6))
plt.plot(x_values, y_values, marker='H')
plt.title("Steps Narrow")
plt.xlabel("Statistic")
plt.ylabel("Minute Steps Narrow")
plt.show()

plt.figure(figsize=(8,6))
plt.plot(x_values, y_values, marker='H')
plt.title("Steps Wide")
plt.xlabel("Statistic")
plt.ylabel("Minute Steps Wide")
plt.show()

sleep_day_data = [10,20,30,40,50]

sleep_day_series = pd.Series(sleep_day_data)

max_sleep_day = sleep_day_series.max()
min_sleep_day = sleep_day_series.min()
mean_sleep_day = sleep_day_series.mean()
median_sleep_day = sleep_day_series.median()

print("Sleep Day")
print("Max:", max_sleep_day)
print("Min:", min_sleep_day)
print("Mean:", mean_sleep_day)
print("Median:", median_sleep_day)
print("\n")

data_labels = ['Max', 'Min', 'Mean', 'Median']
data_values = [max_sleep_day, min_sleep_day, mean_sleep_day, median_sleep_day]

plt.bar(data_labels, data_values, color=['red', 'blue', 'black', 'purple'])
plt.title('Sleep Day')
plt.xlabel('Sleep Metric')
plt.ylabel('Hours')
plt.show()

weight_log_data = [123,125,130,125,138]

weight_log_series = pd.Series(weight_log_data)

max_weight_log = weight_log_series.max()
min_weight_log = weight_log_series.min()
mean_weight_log = weight_log_series.mean()
median_weight_log = weight_log_series.median()

print("Weight Log")
print("Max:", max_weight_log)
print("Min:", min_weight_log)
print("Mean:", mean_weight_log)
print("Median:", median_weight_log)


labels = ['Max', 'Min', 'Mean', 'Median']
sizes = [max_weight_log, min_weight_log, mean_weight_log, median_weight_log]
colors = ['yellow', 'blue', 'red', 'green']

plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=150)
plt.title('Weight Log')
plt.axis('Equal')
plt.show()

"""**Finally**

**Daily**
"""

import matplotlib.pyplot as plt

daily_activity_merged = ["Day 1", "Day 2", "Day 3", "Day 4", "Day 5"]
daily_steps_merged = [7000, 8000, 9000, 10000, 4000]
daily_calories_merged = [4300, 4500, 4900, 5000, 5100]
daily_intensities_merged = [1,4,7,9,8]

plt.figure(figsize=(10, 8))

plt.plot(daily_activity_merged, daily_steps_merged, label='Steps', marker='P')

plt.plot(daily_activity_merged, daily_calories_merged, label='Calories', marker='P')

plt.plot(daily_activity_merged, daily_intensities_merged, label='Intensities', marker='P')

plt.xlabel('Days')
plt.ylabel('Values')
plt.title('Daily Activity Overview')
plt.legend()

plt.show()

"""**Hourly**"""

import matplotlib.pyplot as plt

# data (replace with your actual data)
hourly_calories_merged = [110,120,130,140,150,160,170,180,190,200]
hourly_steps_merged = [500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400]
hourly_intensities_merged = [2,2.8,3.1,3.7,4.1,4.2,4,9,4,10]

# Hourly timestamps, replace this with your actual timestamps
hourly_timestamps = range(1, 11)

# Bar chart for hourly calories
plt.figure(figsize=(10, 8))
plt.bar(hourly_timestamps, hourly_calories_merged, color='green', alpha=0.7)
plt.xlabel('Hour')
plt.ylabel('Calories')
plt.title('Hourly Calories')
plt.show()

# Bar chart for hourly steps
plt.figure(figsize=(10, 8))
plt.bar(hourly_timestamps, hourly_steps_merged, color='red', alpha=0.7)
plt.xlabel('Hour')
plt.ylabel('Steps')
plt.title('Hourly Steps')
plt.show()

# Bar chart for hourly intensities
plt.figure(figsize=(10, 8))
plt.bar(hourly_timestamps, hourly_intensities_merged, color='blue', alpha=0.7)
plt.xlabel('Hour')
plt.ylabel('Intensities')
plt.title('Hourly Intensities')
plt.show()

"""**Heartrate**"""

import matplotlib.pyplot as plt

heartrate_seconds_merged = [90,92,94,95,96,99,100,100,120,130]

seconds_timestamps = range(1, 11)

bar_colors = ['cyan', 'gray', 'brown', 'pink', 'blue', 'purple', 'gray', 'yellow', 'black', 'red']

# Bar chart
plt.figure(figsize=(9, 7))
plt.bar(seconds_timestamps, heartrate_seconds_merged, color=bar_colors, alpha=0.7)
plt.xlabel('Seconds')
plt.ylabel('Heart Rate')
plt.title('Heart Rate Over Seconds')
plt.show()

"""**Minutes**"""

import matplotlib.pyplot as plt

mintue_calorieswide_merged = np.random.randint(50, 500, size=60)
mintues_calorierNarrow_merged = np.random.randint(100, 500, size=60)
mintues_intenisitesWide_merged = np.random.uniform(0.5, 5, size=60)
mintues_intenisitesNarrow_merged = np.random.uniform(1, 5, size=60)

minute_timestamps = range(1, 61)

plt.figure(figsize=(10, 8))
plt.bar(minute_timestamps, mintue_calorieswide_merged, color='red', alpha=0.7)
plt.xlabel('Minute')
plt.ylabel('Calories')
plt.title('Minute-wise Calories Wide')
plt.show()

# Bar chart for minutes_calorierNarrow_merged
plt.figure(figsize=(10, 8))
plt.bar(minute_timestamps, mintues_calorierNarrow_merged, color='blue', alpha=0.7)
plt.xlabel('Minute')
plt.ylabel('Calories')
plt.title('Minute-wise Calories Narrow')
plt.show()

# Bar chart for minutes_intenisitesWide_merged
plt.figure(figsize=(10, 8))
plt.bar(minute_timestamps, mintues_intenisitesWide_merged, color='green', alpha=0.7)
plt.xlabel('Minute')
plt.ylabel('Intensities')
plt.title('Minute-wise Intensities Wide')
plt.show()

# Bar chart for minutes_intenisitesNarrow_merged
plt.figure(figsize=(10, 8))
plt.bar(minute_timestamps, mintues_intenisitesNarrow_merged, color='red', alpha=0.7)
plt.xlabel('Minute')
plt.ylabel('Intensities')
plt.title('Minute-wise Intensities Narrow')
plt.show()

"""**SleepDay**"""

import matplotlib.pyplot as plt
from datetime import datetime

sleep_data = {
    'timestamp': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05'],
    'duration_minutes': [489,348,987,675,897]  }

sleep_data['timestamp'] = pd.to_datetime(sleep_data['timestamp'])

sleep_data = pd.DataFrame(sleep_data).sort_values('timestamp')

plt.figure(figsize=(10, 8))
plt.plot(sleep_data['timestamp'], sleep_data['duration_minutes'], marker='P')
plt.xlabel('Date')
plt.ylabel('Sleep Duration (minutes)')
plt.title('Sleep Duration Over Days')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**WeightLoInfo**"""

import matplotlib.pyplot as plt
from datetime import datetime

weight_data = {
    'timestamp': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05'],
    'weight_kg': [50,59,65,76,89]    }

weight_data['timestamp'] = pd.to_datetime(weight_data['timestamp'])

weight_data = pd.DataFrame(weight_data).sort_values('timestamp')

bar_colors = ['skyblue', 'lightblack', 'lightcoral', 'lightsalmon', 'lightsteelred']

# Plotting the weight measurements over time
plt.figure(figsize=(10, 8))
plt.plot(weight_data['timestamp'], weight_data['weight_kg'], marker='P', color='red')
plt.xlabel('Date')
plt.ylabel('Weight (kg)')
plt.title('Weight Log Over Time')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()